{"version":3,"sources":["Components/LineGraph.js","Components/Card.js","Components/CovidSummary.js","App.js","index.js"],"names":["LineGraph","props","style","width","height","margin","data","labels","label","map","l","substr","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinSyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","poiintHoverBorderWidth","pointRadius","pointHitRadius","yAxis","Card","className","children","CovidSummary","totalConfirmed","totalRecovered","totalDeaths","country","textTransform","display","justifyContent","color","fontWeight","value","displayType","thousandSeparator","App","useState","setTotalConfirmed","setTotalRecovered","setTotalDeaths","loading","setLoading","covidSummary","setCovidSummary","days","setDays","setCountry","coronaCountAr","setCoronaCountAr","setLabel","useEffect","axios","get","then","res","status","Global","TotalConfirmed","TotalRecovered","TotalDeaths","console","log","catch","error","formatDate","date","d","Date","year","getFullYear","month","getMonth","slice","_date","getDate","getCoronaReportByDateRande","countrySlug","from","to","yAxisCoronaCount","Cases","xAxisLabel","covidDetails","Countries","find","Slug","onChange","e","target","setDate","Country","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.073244cf.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nconst LineGraph=(props)=>{\r\n    return(\r\n        <div\r\n        style={{\r\n            width:'600px',\r\n            height:'600px',\r\n            margin:'50px auto',\r\n        }}\r\n        \r\n        \r\n        \r\n        >\r\n            {/* <h1>this is a linegraph section</h1> */}\r\n            <Line data={\r\n                {\r\n                    \r\n                    labels:props.label.map(l=>l.substr(0,10)),\r\n                    datasets:[\r\n                        {\r\n                            label:'Corona Virus Across Country',\r\n                            fill:true,\r\n                            lineTension:0.1,\r\n                            backgroundColor:'rgba(75,192,192,0.4)',\r\n                            borderColor:'rgba(75,192,192,1)',\r\n                            borderCapStyle:'butt',\r\n                            borderDash:[],\r\n                            borderDashOffset:0.0,\r\n                            borderJoinSyle:'miter',\r\n                            pointBorderColor:'rgba(75,192,192,1)',\r\n                            pointBackgroundColor:'#fff',\r\n                            pointBorderWidth:1,\r\n                            pointHoverRadius:5,\r\n                            pointHoverBackgroundColor:'rgba(75,192,192,1)',\r\n                            pointHoverBorderColor:'rgba(220,220,220,2)',\r\n                            poiintHoverBorderWidth:2,\r\n                            pointRadius:1,\r\n                            pointHitRadius:10,\r\n                            data:props.yAxis, \r\n    \r\n    \r\n                        }\r\n                    ]\r\n                }}/>\r\n        </div>\r\n    )\r\n}\r\nexport default LineGraph;","import React from 'react';\r\nconst Card =(props)=>{\r\n    return(\r\n        <div className=\"card\">\r\n            {props.children}\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport NumberFormat from 'react-number-format';\r\nconst CovidSummary =(props)=>{\r\n    const {\r\n        totalConfirmed,\r\n        totalRecovered,\r\n        totalDeaths,\r\n        country\r\n\r\n    }=props;\r\n    return(\r\n\r\n    <div>\r\n        <div>\r\n          <h1 style={{textTransform:'capitalize'}}>{country===''? 'World wide Corona Update' :country}</h1>\r\n          <div style={{\r\n            display:'flex',\r\n            justifyContent:'center'\r\n            \r\n\r\n          }}>\r\n            <Card>\r\n              <span style={{color:\"tomato\",fontWeight:'bold'}}>Total Confirmed </span><br/>\r\n              <span>\r\n                  {<NumberFormat \r\n                  value={totalConfirmed}\r\n                   displayType={'text'}\r\n                   thousandSeparator={true}\r\n                   />}</span>\r\n            </Card>\r\n            <Card>\r\n              <span style={{color:'green',fontWeight:'bold'}}>Total Recovered</span>\r\n              <br/>\r\n              <span>\r\n              {<NumberFormat \r\n                  value={totalRecovered}\r\n                   displayType={'text'}\r\n                   thousandSeparator={true}\r\n                   />}\r\n                \r\n                </span>\r\n            </Card>\r\n            <Card>\r\n              <span style={{color:'darkred',fontWeight:'bold'}}>Total Deaths</span>\r\n              <br/>\r\n              <span>\r\n              {<NumberFormat \r\n                  value={totalDeaths}\r\n                   displayType={'text'}\r\n                   thousandSeparator={true}\r\n                   />}\r\n              </span>\r\n            </Card>\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\nexport default CovidSummary;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport LineGraph from './Components/LineGraph';\nimport CovidSummary from './Components/CovidSummary';\nimport axios from 'axios';\nfunction App() {\n  const [totalConfirmed,setTotalConfirmed]=useState(0);\n  const[totalRecovered,setTotalRecovered]=useState(0);\n  const[totalDeaths,setTotalDeaths]=useState(0);\n  const [loading,setLoading]=useState(false);\n  const [covidSummary,setCovidSummary]=useState({});\n  const [days,setDays]=useState(7);\n  const[country,setCountry]=useState('');\n  const[coronaCountAr,setCoronaCountAr]=useState([]);\n  const[label,setLabel]=useState([]);\n\n  useEffect(()=>{\n    setLoading(true);\n    axios.get(`https://api.covid19api.com/summary`)\n    .then(res=>{\n      setLoading(false);\n\n      if(res.status===200){\n        setTotalConfirmed(res.data.Global.TotalConfirmed);\n        setTotalRecovered(res.data.Global.TotalRecovered);\n        setTotalDeaths(res.data.Global.TotalDeaths);\n        setCovidSummary(res.data); \n        \n      \n\n      }\n      console.log(res);\n    })\n    .catch(error =>{\n      console.log(error)\n    })\n    \n\n\n  },[]);\n  const formatDate=(date)=>{\n    const d=new Date(date);\n    const year=d.getFullYear();\n    const month=`0${d.getMonth()+1}`.slice(-2);\n    const _date=d.getDate();\n\n    return `${year}-${month}-${_date}`;\n  }\n  const countryHandler=(e)=>{\n    setCountry(e.target.value);\n    const d=new Date();\n    const to=formatDate(d);\n    const from=formatDate(d.setDate(d.getDate()-days));\n    // console.log(from,to);\n    getCoronaReportByDateRande(e.target.value,from,to);\n\n  }\n  const daysHandler=(e)=>{\n    setDays(e.target.value);\n    const d=new Date();\n    const to=formatDate(d);\n    const from=formatDate(d.setDate(d.getDate()-e.target.value));\n    getCoronaReportByDateRande(country,from,to);\n\n  }\n  const getCoronaReportByDateRande=(countrySlug,from,to)=>{\n    \n    axios.get(`https://api.covid19api.com/country/${countrySlug}/status/confirmed?from=${from}T00:00:00Z&to=${to}T00:00:00Z`)\n    .then(res=>{\n      console.log(res);\n      const yAxisCoronaCount=res.data.map(d=>d.Cases);\n      const xAxisLabel=res.data.map(d=>d.Date);\n      const covidDetails= covidSummary.Countries.find(country => country.Slug===countrySlug);\n      setTotalConfirmed(covidDetails.TotalConfirmed);\n      setTotalRecovered(covidDetails.TotalRecovered);\n      setTotalDeaths(covidDetails.TotalDeaths);\n      setCoronaCountAr(yAxisCoronaCount);\n      setLabel(xAxisLabel);\n\n    })\n    .catch(error=>{\n      console.log(error);\n    })\n\n\n  }\n\n\n\n  if(loading){\n    return <p>Fetching data from api...............</p>\n  }\n  return(\n    <div className=\"App\">\n      <CovidSummary\n        totalConfirmed={totalConfirmed}\n        totalRecovered={totalRecovered}\n        totalDeaths={totalDeaths}\n        country={country}\n      \n\n      />\n      <div>\n        <select value={country} onChange={countryHandler}>\n          <option value=''>Select Coounty</option>\n          {\n            covidSummary.Countries && covidSummary.Countries.map(country=>\n              <option key={country.Slug} value={country.Slug}>{country.Country}</option>\n              \n              )\n          }\n          \n\n        </select>\n        <select value={days} onChange={daysHandler}>\n          <option value=\"7 \">Last 7 Days Data</option>\n          <option value=\"30\">Last 30 Days Data</option>\n          <option value=\"90\">Last 90 Days Data</option>\n\n        </select>\n      </div>\n     \n      <LineGraph\n      yAxis={coronaCountAr}\n      label={label} \n      \n      />\n\n    </div>\n  )\n}\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}